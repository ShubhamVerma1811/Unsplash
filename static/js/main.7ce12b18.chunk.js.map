{"version":3,"sources":["components/Home.js","components/SearchBox.js","components/SearchResults.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","images","setImages","h","Headers","append","req","Request","method","headers","mode","a","fetch","res","json","data","useEffect","fetchPhotos","className","map","item","key","id","src","urls","full","alt","alt_descriptions","user","name","profile_image","large","SearchBox","query","setQuery","setData","uri","fetchQueryPhoto","console","log","onSubmit","e","target","firstChild","value","preventDefault","type","placeholder","SearchResults","props","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UAsDeA,MAnDf,WAAiB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KACCC,EADD,KAGRC,EAAI,IAAIC,QAEdD,EAAEE,OACA,gBACA,yDAGF,IAEMC,EAAM,IAAIC,QAFP,mCAEoB,CAC3BC,OAAQ,MACRC,QAASN,EACTO,KAAM,SAfM,4CAuBd,8BAAAC,EAAA,sEACoBC,MAAMN,GAD1B,cACQO,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGEb,EAAUa,GAHZ,4CAvBc,sBA6Bd,OAXAC,qBAAU,YAlBI,mCAmBZC,KAEC,IASD,6BACE,oCACA,yBAAKC,UAAU,gBACZjB,EAAOkB,KAAI,SAACC,GAAD,OACV,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,WAC3B,yBACEA,UAAU,SACVK,IAAKH,EAAKI,KAAKC,KACfC,IAAKN,EAAKO,mBAEZ,yBAAKT,UAAU,YACb,4BAAKE,EAAKQ,KAAKC,MACf,yBAAKN,IAAKH,EAAKQ,KAAKE,cAAcC,MAAOL,IAAI,aCI5CM,MA/Cf,WAAsB,IAAD,EACOhC,mBAAS,IADhB,mBACZiC,EADY,KACLC,EADK,OAEKlC,mBAAS,IAFd,mBAEZe,EAFY,KAENoB,EAFM,KAIbhC,EAAI,IAAIC,QAEdD,EAAEE,OACA,gBACA,yDAGF,IAAM+B,EAAG,8DAA0DH,GAE7D3B,EAAM,IAAIC,QAAQ6B,EAAK,CAC3B5B,OAAQ,MACRC,QAASN,EACTO,KAAM,SAhBW,4CAwBnB,8BAAAC,EAAA,sEACoBC,MAAMN,GAD1B,cACQO,EADR,gBAEqBA,EAAIC,OAFzB,OAEQC,EAFR,OAGEoB,EAAQpB,GAHV,4CAxBmB,sBAoCnB,OAjBAC,qBAAU,YAnBS,mCAoBjBqB,KAEC,CAACJ,IAOJK,QAAQC,IAAIxB,GAQV,6BACE,0CACA,0BAAMyB,SARV,SAAqBC,GACnBP,EAASO,EAAEC,OAAOC,WAAWC,OAC7BH,EAAEI,mBAOE,2BAAOC,KAAK,OAAOC,YAAY,kBAC/B,4BAAQD,KAAK,UAAb,aCjCOE,MARf,SAAuBC,GACrB,OACE,6BACE,+CCcSC,MAZf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiC,KAAK,IAAIC,UAAWpB,IAC3B,kBAAC,IAAD,CAAOmB,KAAK,IAAIE,OAAK,EAACD,UAAWrD,IACjC,kBAAC,IAAD,CAAOoD,KAAK,cAAcE,OAAK,EAACD,UAAWJ,OCD/BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.7ce12b18.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Home/Home.css\";\r\n\r\nfunction Home() {\r\n  const [images, setImages] = useState([]);\r\n\r\n  const h = new Headers();\r\n\r\n  h.append(\r\n    \"Authorization\",\r\n    \"Client-ID E5EHMkfEkragu1136UCpc_fGGenGwqZltRj6vgw9Hyk\"\r\n  );\r\n\r\n  const uri = `https://api.unsplash.com/photos/`;\r\n\r\n  const req = new Request(uri, {\r\n    method: \"GET\",\r\n    headers: h,\r\n    mode: \"cors\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPhotos();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  async function fetchPhotos() {\r\n    const res = await fetch(req);\r\n    const data = await res.json();\r\n    setImages(data);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n      <div className=\"imgContainer\">\r\n        {images.map((item) => (\r\n          <div key={item.id} className=\"content\">\r\n            <img\r\n              className=\"images\"\r\n              src={item.urls.full}\r\n              alt={item.alt_descriptions}\r\n            />\r\n            <div className=\"userInfo\">\r\n              <h4>{item.user.name}</h4>\r\n              <img src={item.user.profile_image.large} alt=\"\" />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nfunction SearchBox() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [data, setData] = useState({});\r\n\r\n  const h = new Headers();\r\n\r\n  h.append(\r\n    \"Authorization\",\r\n    \"Client-ID E5EHMkfEkragu1136UCpc_fGGenGwqZltRj6vgw9Hyk\"\r\n  );\r\n\r\n  const uri = `https://api.unsplash.com/search/photos?page=1&query=${query}`;\r\n\r\n  const req = new Request(uri, {\r\n    method: \"GET\",\r\n    headers: h,\r\n    mode: \"cors\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchQueryPhoto();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n\r\n  async function fetchQueryPhoto() {\r\n    const res = await fetch(req);\r\n    const data = await res.json();\r\n    setData(data);\r\n  }\r\n  console.log(data);\r\n\r\n  function searchPhoto(e) {\r\n    setQuery(e.target.firstChild.value);\r\n    e.preventDefault();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Search Box</h1>\r\n      <form onSubmit={searchPhoto}>\r\n        <input type=\"text\" placeholder=\"Search Images\" />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nfunction SearchResults(props) {\r\n  return (\r\n    <div>\r\n      <h1>Image Results</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport SearchBox from \"./components/SearchBox\";\nimport SearchResults from \"./components/SearchResults\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/\" component={SearchBox} />\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/images/:id\" exact component={SearchResults} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}